{"version":3,"sources":["common/header/Header.js","screens/home/Home.js","screens/login/Login.js","screens/profile/Profile.js","screens/Controller.js","index.js"],"names":["Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","profileButtonClickedHandler","e","state","anchorEl","setState","currentTarget","openMenuHandler","objectSpread","menuIsOpen","onLogOutClickedHandler","sessionStorage","removeItem","isLoggedIn","onSearchChangeHandler","props","onSearchTextChange","target","value","classes","react_default","a","createElement","react_router","to","className","href","id","showSearchBox","Search_default","Input","searchText","placeholder","disableUnderline","onChange","showProfileIcon","IconButton","onClick","src","profilePicture","alt","Menu","open","onClose","MenuList","menuList","showMyAccount","react_router_dom","menuItems","underline","color","MenuItem","Component","withStyles","theme","position","width","padding","textDecoration","Home","componentDidMount","fetch","baseUrl","accessToken","then","response","json","mediaIdsAndCaptions","data","forEach","image","i","d","Date","timestamp","toLocaleString","split","date","time","trim","caption","hastags","element","imageData","concat","catch","ex","ReactDOM","render","style","margin","document","getElementsByClassName","likeBtnHandler","imageId","obj","find","userLiked","count","defaultCount","onCommentTextChangeHandler","commentText","currentCommentId","AddBtnHandler","undefined","comments","commentCount","comment","commentId","toConsumableArray","keyword","copyOfImageData","searchOn","updatedImageArr","toLowerCase","match","push","images","getItem","_this2","common_header_Header","Grid","container","spacing","wrap","alignContent","grid","map","key","item","xs","sm","Card","card","CardHeader","title","avatar","Avatar","username","subheader","cardheader","CardContent","media_url","media","aria-label","FavoriteBorder_default","fontSize","Favorite_default","Typography","variant","commentUsername","gutterbottom","FormControl","fullWidth","InputLabel","htmlFor","type","event","Button","addCommentBtn","maxWidth","height","fontWeight","flexDirection","marginTop","alignItems","justifyContent","marginLeft","Login","inputUsernameChangeHandler","inputPasswordChangeHandler","password","loginClickHandler","reqUsername","reqPassword","invalidCredentials","setItem","gutterBottom","required","FormHelperText","TabContainer","component","children","Profile","postCount","noOfPosts","fullNameEditOpenModalHandler","modalIsOpen","fullNameEditCloseModalHandler","fullNameRequired","editFullNameHandler","newName","updateFullNameHandler","fullName","imageClickHandler","imageModalIsOpen","currentImage","currentProfilePicture","imageCloseModalHandler","defaultLikes","follows","followedBy","_this$state","Fab","fab","Edit_default","Modal","modal","aria-labelledby","paper","Profile_TabContainer","fullname","GridList","cellHeight","cols","gridListMain","GridListTile","imageModal","modalStyle","backgroundColor","boxShadow","shadows","display","transform","cursor","palette","background","Controller","exact","path","screens_login_Login","assign","screens_home_Home","screens_profile_Profile","screens_Controller","getElementById"],"mappings":"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","file":"static/js/main.32e464a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Header.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { MenuList } from \"@material-ui/core\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n  searchText: {\r\n    //styling for text inside search box\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    padding: \"5px 0px 0px 5px\",\r\n  },\r\n  menuList: {\r\n    //Styling for the menulist\r\n    width: \"150px\",\r\n    padding: \"0px\",\r\n  },\r\n  menuItems: {\r\n    //Styling for the menu items\r\n    textDecoration: \"none\",\r\n    color: \"#000\",\r\n  },\r\n});\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      menuIsOpen: false,\r\n      isLoggedIn: true,\r\n    };\r\n  }\r\n\r\n  //This function is called when the profile icon is clicked\r\n  profileButtonClickedHandler = (e) => {\r\n    this.state.anchorEl\r\n      ? this.setState({ anchorEl: null })\r\n      : this.setState({ anchorEl: e.currentTarget });\r\n    this.openMenuHandler();\r\n  };\r\n\r\n  //Handle the open/close menu when profile icon is clicked\r\n  openMenuHandler = () =>\r\n    this.setState({\r\n      ...this.state,\r\n      menuIsOpen: !this.state.menuIsOpen,\r\n    });\r\n\r\n  //This method is called when log out is clicked and clears access token in session storage\r\n  onLogOutClickedHandler = () => {\r\n    sessionStorage.removeItem(\"access-token\"); //Clear access-token\r\n    this.setState({\r\n      isLoggedIn: false,\r\n    });\r\n  };\r\n\r\n  // This is called when there are any changes in search box\r\n  onSearchChangeHandler = (e) => {\r\n    this.props.onSearchTextChange(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    //custom Styles are stored in classes\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        {this.state.isLoggedIn === false ? ( //If logged out then redirect to login page\r\n          <Redirect to=\"/\" />\r\n        ) : (\r\n          <div>\r\n            <header className=\"app-header\">\r\n              <a href=\"/home\" id=\"logo\">\r\n                Image Viewer\r\n              </a>\r\n              {/* Search box shown only when showSearchBox is true */}\r\n              {this.props.showSearchBox ? (\r\n                <span className=\"header-searchbox\">\r\n                  <SearchIcon id=\"search-icon\" />\r\n                  <Input\r\n                    className={classes.searchText}\r\n                    placeholder=\"Search…\"\r\n                    disableUnderline={true}\r\n                    onChange={this.onSearchChangeHandler}\r\n                  />\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              ) //Do not display search box\r\n              }\r\n\r\n              {/* Profile picture is shown only when showProfileIcon is true */}\r\n              {this.props.showProfileIcon ? (\r\n                <span>\r\n                  <IconButton\r\n                    id=\"profile-icon\"\r\n                    onClick={this.profileButtonClickedHandler}\r\n                  >\r\n                    <img\r\n                      src={this.props.profilePicture}\r\n                      alt=\"profileImage\"\r\n                      id=\"profile-picture\"\r\n                    />\r\n                  </IconButton>\r\n                  <Menu\r\n                    id=\"profile-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    open={this.state.menuIsOpen}\r\n                    onClose={this.profileButtonClickedHandler}\r\n                  >\r\n                    <MenuList className={classes.menuList}>\r\n                      {this.props.showMyAccount === true ? (\r\n                        <div>\r\n                          {/* Go to Profile page on clicking \"My Account\" */}\r\n                          <Link\r\n                            to={\"/profile\"}\r\n                            className={classes.menuItems}\r\n                            underline=\"none\"\r\n                            color={\"default\"}\r\n                          >\r\n                            <MenuItem className={classes.menuItems}>\r\n                              My Account\r\n                            </MenuItem>\r\n                          </Link>\r\n                          <div className=\"horizontal-line\"> </div>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {/* Go to Login page on clicking \"Logout\" */}\r\n                      <MenuItem\r\n                        className=\"menu-items\"\r\n                        onClick={this.onLogOutClickedHandler}\r\n                      >\r\n                        Logout\r\n                      </MenuItem>\r\n                    </MenuList>\r\n                  </Menu>\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              ) //Do not display profile picture\r\n              }\r\n            </header>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Header);\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Header from \"../../common/header/Header\";\r\nimport \"./Home.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// Custom Styles to over ride material ui default styles\r\nconst styles = (theme) => ({\r\n  grid: {\r\n    //style for the grid component\r\n    padding: \"20px\",\r\n  },\r\n  card: {\r\n    //style for the card component\r\n    maxWidth: \"100%\",\r\n  },\r\n  avatar: {\r\n    //style for the avatar in the card header\r\n    margin: 10,\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n  title: {\r\n    //Style for the title of the card\r\n    fontWeight: \"600\",\r\n  },\r\n  media: {\r\n    // style for the image in the card\r\n    height: \"56.25%\",\r\n    width: \"100%\",\r\n  },\r\n  comment: {\r\n    //for the form control\r\n    flexDirection: \"row\",\r\n    marginTop: \"10px\",\r\n    alignItems: \"baseline\",\r\n    justifyContent: \"center\",\r\n  },\r\n  addCommentBtn: {\r\n    // ADD button styling\r\n    marginLeft: \"15px\",\r\n  },\r\n  commentUsername: {\r\n    //style for the userName of the comment\r\n    fontSize: \"inherit\",\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoggedIn: sessionStorage.getItem(\"access-token\") == null ? false : true,\r\n      profilePicture:\r\n        \"https://scontent.cdninstagram.com/v/t51.29350-15/116007663_2971510962975451_2540312586520375176_n.jpg?_nc_cat=104&ccb=1-3&_nc_sid=8ae9d6&_nc_ohc=jHT5B84rqzgAX-H9hA8&_nc_ht=scontent.cdninstagram.com&oh=61c7422cbaf470935836a5af0f890b0e&oe=60B2788B\",\r\n      accessToken: sessionStorage.getItem(\"access-token\"),\r\n      mediaIdsAndCaptions: [],\r\n      imageData: [],\r\n      defaultCount: 1,\r\n      commentText: \"\",\r\n      currentCommentId: \"\",\r\n      searchOn: false,\r\n      copyOfImageData: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // fetch data only when user is logged In\r\n    if (this.state.isLoggedIn) {\r\n      // fetch media ID and Caption using 1st Api\r\n      fetch(\r\n        this.props.baseUrl +\r\n          \"me/media?fields=id,caption&access_token=\" +\r\n          this.state.accessToken\r\n      )\r\n        .then(function(response) {\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          // Storing media objects as an array of objects in state variable called mediaIdsAndCaptions\r\n          this.setState({ mediaIdsAndCaptions: json.data });\r\n\r\n          // loop through each object in mediaIdsAndCaptions array to get imageData\r\n          this.state.mediaIdsAndCaptions.forEach((image, i) => {\r\n            // fetch id, media_type, media_url, username, timestamp using 2nd Api\r\n            fetch(\r\n              this.props.baseUrl +\r\n                image.id +\r\n                \"?fields=id,media_type,media_url,username,timestamp&access_token=\" +\r\n                this.state.accessToken\r\n            )\r\n              .then(function(response) {\r\n                return response.json();\r\n              })\r\n              .then((json) => {\r\n                var d = new Date(json.timestamp); // extract timestamp from the json response\r\n                d = d.toLocaleString(\"en-GB\").split(\",\"); // convert it to local string in 24 hrs format and split it\r\n                json.date = d[0]; // after splitting data in 0th index is date, add a property date to the current object\r\n                json.time = d[1].trim(); // after splitting data in 1st index is time, add a property time to the current object\r\n                json.caption = image.caption.split(\"\\n#\")[0]; // add a property caption to the current object by extracting it from mediaIdsAndCaptions array\r\n                json.hastags = \"\";\r\n                image.caption.split(/\\s+/).forEach((element) => {\r\n                  if (element[0] === \"#\") {\r\n                    json.hastags = json.hastags + \" \" + element;\r\n                  }\r\n                });\r\n                this.setState({ imageData: this.state.imageData.concat(json) }); // add each object to array imageData\r\n              });\r\n          });\r\n        })\r\n        .catch((ex) => {\r\n          ReactDOM.render(\r\n            <div style={{ margin: \"10% auto\" }}>\r\n              <h1>403 Request Limit Error: come back later :)</h1>\r\n              <p>Message: Default Instagram request limit exceeded.....</p>\r\n            </div>,\r\n            document.getElementsByClassName(\"flex-container\")[0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  // This method increments and decrements the number of like and adds the userLiked and count to object\r\n  likeBtnHandler = (imageId) => {\r\n    let obj = this.state.imageData.find((element) => element.id === imageId);\r\n\r\n    if (obj.userLiked === true) {\r\n      // if user already liked the image then decrement the count\r\n      obj.count = obj.count - 1;\r\n      obj.userLiked = false;\r\n      this.setState({});\r\n    } else {\r\n      // if user didn't like the image then increment the count and set userLiked to true\r\n      obj.count = this.state.defaultCount + 1;\r\n      obj.userLiked = true;\r\n      this.setState({});\r\n    }\r\n  };\r\n\r\n  // This method sets the state of commentText using text entered\r\n  onCommentTextChangeHandler = (e, imageId) => {\r\n    this.setState({ commentText: e.target.value, currentCommentId: imageId });\r\n  };\r\n\r\n  // On ADD button clicked, comments and comment count are added to comments array as JSON objects\r\n  AddBtnHandler = (imageId) => {\r\n    let obj = this.state.imageData.find((element) => element.id === imageId);\r\n\r\n    if (this.state.commentText !== \"\") {\r\n      // Do not add comments if it is empty\r\n      if (obj.comments === undefined) {\r\n        obj.commentCount = 1;\r\n        obj.comments = [\r\n          {\r\n            comment: this.state.commentText,\r\n            commentCount: obj.commentCount,\r\n            commentId: obj.id,\r\n          },\r\n        ];\r\n        this.setState({ commentText: \"\" });\r\n      } else {\r\n        obj.comments = [\r\n          ...obj.comments,\r\n          {\r\n            comment: this.state.commentText,\r\n            commentCount: obj.commentCount + 1,\r\n            commentId: obj.id,\r\n          },\r\n        ];\r\n        obj.commentCount = obj.commentCount + 1;\r\n        this.setState({ commentText: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  // This method updates the imageData array based on \"keyword\" search\r\n  onSearchTextChange = (keyword) => {\r\n    if (!(keyword === \"\")) {\r\n      //check if search input keyword value is empty\r\n      var copyOfImageData = [];\r\n      /* copy of imagaData array based on searchOn value\r\n               SearchOn value is true when any character is entered in search box and is true until keyword is null\r\n               updatedImageArr - updated image array based on keyword\r\n            */\r\n      this.state.searchOn\r\n        ? (copyOfImageData = this.state.copyOfImageData)\r\n        : (copyOfImageData = this.state.imageData);\r\n      var updatedImageArr = [];\r\n      var searchOn = true; //\r\n      keyword = keyword.toLowerCase();\r\n\r\n      copyOfImageData.forEach((element) => {\r\n        var caption = element.caption.split(\"\\n#\")[0]; // extracting the caption\r\n        caption = caption.toLowerCase();\r\n        if (caption.match(keyword)) {\r\n          //matching keyword with caption\r\n          updatedImageArr.push(element); //if any character matches push it to updatedImageArr\r\n        }\r\n      });\r\n      if (!this.state.searchOn) {\r\n        // For the first search\r\n        this.setState({\r\n          searchOn: searchOn,\r\n          images: updatedImageArr,\r\n          copyOfImageData: copyOfImageData,\r\n        });\r\n      } else {\r\n        // Until keyword is null\r\n        this.setState({\r\n          imageData: updatedImageArr,\r\n        });\r\n      }\r\n    } else {\r\n      // If keyword is null then search is false and assign copyOfImageData to imageData array and set copyOfImageData to empty array\r\n      this.setState({\r\n        searchOn: false,\r\n        imageData: this.state.copyOfImageData,\r\n        copyOfImageData: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // custom styles are stored in the const classes\r\n    const { classes } = this.props;\r\n    var { defaultCount } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {this.state.isLoggedIn === false ? (\r\n          <Redirect to=\"/\" />\r\n        ) : (\r\n          <div>\r\n            <Header\r\n              profilePicture={this.state.profilePicture}\r\n              showSearchBox={this.state.isLoggedIn ? true : false}\r\n              showProfileIcon={this.state.isLoggedIn ? true : false}\r\n              onSearchTextChange={this.onSearchTextChange}\r\n              showMyAccount={true}\r\n            />\r\n            <div className=\"flex-container\">\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                wrap=\"wrap\"\r\n                alignContent=\"center\"\r\n                className={classes.grid}\r\n              >\r\n                {/* Iteration over imageData array and render each element of array */}\r\n                {this.state.imageData.map((image) => (\r\n                  <Grid key={image.id} item xs={12} sm={6}>\r\n                    <Card className={classes.card}>\r\n                      <CardHeader\r\n                        classes={{ title: classes.title }}\r\n                        avatar={\r\n                          <Avatar\r\n                            src={this.state.profilePicture}\r\n                            className={classes.avatar}\r\n                          />\r\n                        }\r\n                        title={image.username}\r\n                        subheader={image.date + \" \" + image.time}\r\n                        className={classes.cardheader}\r\n                      />\r\n                      <CardContent id=\"card-content\">\r\n                        <img\r\n                          src={image.media_url}\r\n                          alt=\"profileImage\"\r\n                          className={classes.media}\r\n                        />\r\n                        <div className=\"horizontal-line\" />\r\n                        <div className=\"image-caption\">{image.caption}</div>\r\n                        <div className=\"image-hashtags\">{image.hastags}</div>\r\n\r\n                        {/* like button */}\r\n                        <div>\r\n                          <IconButton\r\n                            id=\"like-button\"\r\n                            aria-label=\"like-button\"\r\n                            onClick={() => this.likeBtnHandler(image.id)}\r\n                          >\r\n                            {/* Border is red if user already liked the image else border is displayed */}\r\n                            {image.userLiked === undefined ||\r\n                            image.userLiked === false ? (\r\n                              <FavoriteBorderIcon\r\n                                className=\"like-icon\"\r\n                                fontSize=\"large\"\r\n                              />\r\n                            ) : (\r\n                              <FavoriteIcon\r\n                                className=\"liked-icon\"\r\n                                fontSize=\"large\"\r\n                              />\r\n                            )}\r\n                          </IconButton>\r\n                          {/* if count is 1, like is displayed else likes is displayed*/}\r\n                          {image.count === undefined ? (\r\n                            defaultCount === 1 ? (\r\n                              <span>{defaultCount} like</span>\r\n                            ) : (\r\n                              <span>{defaultCount} likes</span>\r\n                            )\r\n                          ) : image.count === 1 ? (\r\n                            <span>{image.count} like</span>\r\n                          ) : (\r\n                            <span>{image.count} likes</span>\r\n                          )}\r\n                        </div>\r\n\r\n                        {image.commentCount === undefined // if comment count is undefined then do not display anything\r\n                          ? \"\"\r\n                          : image.comments.map((\r\n                              element //Iterating over comments array to show the comments to the corresponding image\r\n                            ) => (\r\n                              <div\r\n                                className=\"comment-display\"\r\n                                key={element.commentCount}\r\n                              >\r\n                                <Typography\r\n                                  variant=\"subtitle2\"\r\n                                  className={classes.commentUsername}\r\n                                  gutterbottom=\"true\"\r\n                                >\r\n                                  {image.username}:\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body1\"\r\n                                  id=\"comment-text-alt\"\r\n                                  className=\"comment-text\"\r\n                                  gutterbottom=\"true\"\r\n                                >\r\n                                  {element.comment}\r\n                                </Typography>\r\n                              </div>\r\n                            ))}\r\n\r\n                        {/* Input to add comment consist of Input ,InputLabel and ADD button */}\r\n                        <FormControl\r\n                          className={classes.comment}\r\n                          fullWidth={true}\r\n                        >\r\n                          <InputLabel htmlFor={image.id}>\r\n                            Add a comment\r\n                          </InputLabel>\r\n                          <Input\r\n                            id={image.id}\r\n                            className=\"comment-text\"\r\n                            type=\"text\"\r\n                            onChange={(event) =>\r\n                              this.onCommentTextChangeHandler(event, image.id)\r\n                            }\r\n                            value={\r\n                              image.id === this.state.currentCommentId\r\n                                ? this.state.commentText\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.addCommentBtn}\r\n                            onClick={() => this.AddBtnHandler(image.id)}\r\n                          >\r\n                            ADD\r\n                          </Button>\r\n                        </FormControl>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Home);\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Header from \"../../common/header/Header\";\r\nimport \"./Login.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\nclass Login extends Component {\r\n  //constructor to set the states of variables initially\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      reqUsername: \"dispNone\",\r\n      reqPassword: \"dispNone\",\r\n      invalidCredentials: \"dispNone\",\r\n      isLoggedIn: false,\r\n    };\r\n  }\r\n\r\n  // Function that handles any changes in the username field and updates state accordingly\r\n  inputUsernameChangeHandler = (e) => {\r\n    this.setState({ username: e.target.value });\r\n  };\r\n\r\n  // Function that handles any changes in the password field and updates state accordingly\r\n  inputPasswordChangeHandler = (e) => {\r\n    this.setState({ password: e.target.value });\r\n  };\r\n\r\n  loginClickHandler = () => {\r\n    //Setting credentials in the login handler\r\n    let username = \"upgrad\";\r\n    let password = \"upgrad@123\";\r\n\r\n    let accessToken =\r\n      \"IGQVJYYUQyQWZAuOTJSbUJiWngtSTZA6X2dLVHgtTFh5TVlqQ0QtR1gxZAUp4ZA1lidTNLSk5Va0syc01zcjQ3S2ZASeTRGOUZArd2RQZAHRIM3dxUEZARd3FtUFVNdmR1SXl6T1JTZAlNVQ0g4U3IwQkJIbXl6RgZDZD\";\r\n\r\n    if (this.state.username === \"\" || this.state.password === \"\") {\r\n      // Check for empty fields of username and password and display required if clicked on Login button\r\n      this.state.username === \"\"\r\n        ? this.setState({ reqUsername: \"dispBlock\" })\r\n        : this.setState({ reqUsername: \"dispNone\" });\r\n      this.state.password === \"\"\r\n        ? this.setState({ reqPassword: \"dispBlock\" })\r\n        : this.setState({ reqPassword: \"dispNone\" });\r\n      this.setState({ invalidCredentials: \"dispNone\" });\r\n    }\r\n    // If login credentials are correct then store the access-token and go to home page\r\n    else if (\r\n      this.state.username === username &&\r\n      this.state.password === password\r\n    ) {\r\n      sessionStorage.setItem(\"access-token\", accessToken);\r\n      this.setState({ isLoggedIn: true });\r\n    } else {\r\n      //Do not display required on entering invalid credentials after filling up the username and password fields\r\n      this.setState({\r\n        reqUsername: \"dispNone\",\r\n        reqPassword: \"dispNone\",\r\n        invalidCredentials: \"dispBlock\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isLoggedIn === true ? (\r\n          <Redirect to=\"/home\" />\r\n        ) : (\r\n          <div>\r\n            <Header />\r\n\r\n            <Card className=\"cardStyle\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  LOGIN\r\n                </Typography>\r\n                <FormControl required className=\"formControl\">\r\n                  <InputLabel htmlFor=\"username\">Username</InputLabel>\r\n                  <Input\r\n                    id=\"username\"\r\n                    type=\"text\"\r\n                    username={this.state.username}\r\n                    onChange={this.inputUsernameChangeHandler}\r\n                  />\r\n                  <FormHelperText className={this.state.reqUsername}>\r\n                    <span className=\"red\">required</span>\r\n                  </FormHelperText>\r\n                </FormControl>\r\n                <br />\r\n                <br />\r\n                <FormControl required className=\"formControl\">\r\n                  <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                  <Input\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    password={this.state.password}\r\n                    onChange={this.inputPasswordChangeHandler}\r\n                  />\r\n                  <FormHelperText className={this.state.reqPassword}>\r\n                    <span className=\"red\">required</span>\r\n                  </FormHelperText>\r\n                </FormControl>\r\n                <br />\r\n                <br />\r\n                <FormHelperText className={this.state.invalidCredentials}>\r\n                  <span className=\"red\">\r\n                    Incorrect username and/or password\r\n                  </span>\r\n                </FormHelperText>\r\n                <br />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={this.loginClickHandler}\r\n                >\r\n                  LOGIN\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./Profile.css\";\r\nimport Header from \"../../common/header/Header\";\r\nimport { Typography, Button } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\n\r\nconst styles = (theme) => ({\r\n  fab: {\r\n    margin: theme.spacing(1.5),\r\n    marginTop: 0,\r\n  },\r\n  paper: {\r\n    backgroundColor: \"#fff\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"25px 20px\",\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  gridListMain: {\r\n    transform: \"translateZ(0)\",\r\n    cursor: \"pointer\",\r\n  },\r\n  modalStyle: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    width: 800,\r\n    height: 400,\r\n    marginTop: \"7%\",\r\n    margin: \"auto\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"30px\",\r\n  },\r\n  comment: {\r\n    flexDirection: \"row\",\r\n    marginTop: \"5px\",\r\n    alignItems: \"baseline\",\r\n    justifyContent: \"center\",\r\n  },\r\n  addCommentBtn: {\r\n    marginLeft: \"15px\",\r\n  },\r\n  commentUsername: {\r\n    fontSize: \"inherit\",\r\n    fontWeight: \"bolder\",\r\n  },\r\n});\r\n\r\nconst TabContainer = function(props) {\r\n  return (\r\n    <Typography component=\"div\" style={{ padding: 0 }}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nclass Profile extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoggedIn: sessionStorage.getItem(\"access-token\") == null ? false : true,\r\n      accessToken: sessionStorage.getItem(\"access-token\"),\r\n      imageData: [],\r\n      profilePicture:\r\n        \"https://scontent.cdninstagram.com/v/t51.29350-15/116007663_2971510962975451_2540312586520375176_n.jpg?_nc_cat=104&ccb=1-3&_nc_sid=8ae9d6&_nc_ohc=jHT5B84rqzgAX-H9hA8&_nc_ht=scontent.cdninstagram.com&oh=61c7422cbaf470935836a5af0f890b0e&oe=60B2788B\",\r\n      username: \"\",\r\n      fullName: \"Tejas S\",\r\n      noOfPosts: \"\",\r\n      follows: 100,\r\n      followedBy: 100,\r\n      modalIsOpen: false,\r\n      fullNameRequired: \"dispNone\",\r\n      newName: \"\",\r\n      imageModalIsOpen: false,\r\n      currentImage: {},\r\n      currentProfilePicture: \"\",\r\n      userLiked: false,\r\n      defaultLikes: 2,\r\n      commentText: \"\",\r\n      currentCommentId: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // fetch data only when user is logged In\r\n    if (this.state.isLoggedIn) {\r\n      // fetch media ID and Caption using 1st Api\r\n      fetch(\r\n        this.props.baseUrl +\r\n          \"me/media?fields=id,caption&access_token=\" +\r\n          this.state.accessToken\r\n      )\r\n        .then(function(response) {\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          // Storing media objects as an array of objects in state variable called mediaIdsAndCaptions\r\n          this.setState({ mediaIdsAndCaptions: json.data });\r\n\r\n          //count the number of posts and set noOfPosts state variable\r\n          let postCount = 0;\r\n          this.state.mediaIdsAndCaptions.forEach(() => {\r\n            postCount += 1;\r\n          });\r\n          this.setState({ noOfPosts: postCount });\r\n\r\n          // loop through each object in mediaIdsAndCaptions array to get imageData\r\n          this.state.mediaIdsAndCaptions.forEach((image, i) => {\r\n            // fetch id, media_type, media_url, username, timestamp using 2nd Api\r\n            fetch(\r\n              this.props.baseUrl +\r\n                image.id +\r\n                \"?fields=id,media_type,media_url,username,timestamp&access_token=\" +\r\n                this.state.accessToken\r\n            )\r\n              .then(function(response) {\r\n                return response.json();\r\n              })\r\n              .then((json) => {\r\n                var d = new Date(json.timestamp); // extract timestamp from the json response\r\n                d = d.toLocaleString(\"en-GB\").split(\",\"); // convert it to local string in 24 hrs format and split it\r\n                json.date = d[0]; // after splitting data in 0th index is date, add a property date to the current object\r\n                json.time = d[1].trim(); // after splitting data in 1st index is time, add a property time to the current object\r\n                json.caption = image.caption.split(\"\\n#\")[0]; // add a property caption to the current object by extracting it from mediaIdsAndCaptions array\r\n                json.hastags = \"\";\r\n                image.caption.split(/\\s+/).forEach((element) => {\r\n                  if (element[0] === \"#\") {\r\n                    json.hastags = json.hastags + \" \" + element;\r\n                  }\r\n                });\r\n                this.setState({ imageData: this.state.imageData.concat(json) }); // add each object to array imageData\r\n\r\n                if (i === 0) {\r\n                  // Set username from the API response - here we get same username for all the posts\r\n                  this.setState({ username: json.username });\r\n                }\r\n              });\r\n          });\r\n        })\r\n        .catch((ex) => {\r\n          ReactDOM.render(\r\n            <div style={{ margin: \"10% auto\" }}>\r\n              <h1>403 Request Limit Error: come back later :)</h1>\r\n              <p>Message: Default Instagram request limit exceeded.....</p>\r\n            </div>,\r\n            document.getElementsByClassName(\"flex-container\")[0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  // Sets state of modalIsOpen to true when EditIcon button is clicked\r\n  fullNameEditOpenModalHandler = () => {\r\n    this.setState({ modalIsOpen: true });\r\n  };\r\n\r\n  // Sets state of modalIsOpen to false when clicked anywhere outside modal\r\n  fullNameEditCloseModalHandler = () => {\r\n    this.setState({ modalIsOpen: false, fullNameRequired: \"dispNone\" });\r\n  };\r\n\r\n  // Stores User input for full name in the newName state variable\r\n  editFullNameHandler = (e) => {\r\n    this.setState({ newName: e.target.value });\r\n  };\r\n\r\n  // On click of the update button, the name input is saved to fullName and close the modal and if input is empty then \"required\" is displayed\r\n  updateFullNameHandler = () => {\r\n    this.state.newName === \"\"\r\n      ? this.setState({ fullNameRequired: \"dispBlock\" })\r\n      : this.setState({\r\n          fullNameRequired: \"dispNone\",\r\n          fullName: this.state.newName,\r\n          newName: \"\",\r\n          modalIsOpen: false,\r\n        });\r\n  };\r\n\r\n  // Sets the clicked image details in the state variable\r\n  imageClickHandler = (image) => {\r\n    this.setState({\r\n      imageModalIsOpen: true,\r\n      currentImage: image,\r\n      currentProfilePicture: this.state.profilePicture,\r\n    });\r\n  };\r\n\r\n  // Sets imageCloseModalHandler to false when clicked outside the modal\r\n  imageCloseModalHandler = () => {\r\n    this.setState({ imageModalIsOpen: false });\r\n  };\r\n\r\n  // This method increments and decrements the number of like and adds the userLiked and count to object\r\n  likeBtnHandler = (imageId) => {\r\n    let obj = this.state.imageData.find((element) => element.id === imageId);\r\n\r\n    if (obj.userLiked === true) {\r\n      // if user already liked the image then decrement the count\r\n      obj.count = obj.count - 1;\r\n      obj.userLiked = false;\r\n      this.setState({});\r\n    } else {\r\n      // if user didn't like the image then increment the count and set userLiked to true\r\n      obj.count = this.state.defaultLikes + 1;\r\n      obj.userLiked = true;\r\n      this.setState({});\r\n    }\r\n  };\r\n\r\n  // This method sets the state of commentText using text entered\r\n  onCommentTextChangeHandler = (e, imageId) => {\r\n    this.setState({ commentText: e.target.value, currentCommentId: imageId });\r\n  };\r\n\r\n  // On ADD button clicked, comments and comment count are added to comments array as JSON objects\r\n  AddBtnHandler = (imageId) => {\r\n    let obj = this.state.imageData.find((element) => element.id === imageId);\r\n\r\n    if (this.state.commentText !== \"\") {\r\n      // Do not add comments if it is empty\r\n      if (obj.comments === undefined) {\r\n        obj.commentCount = 1;\r\n        obj.comments = [\r\n          {\r\n            comment: this.state.commentText,\r\n            commentCount: obj.commentCount,\r\n            commentId: obj.id,\r\n          },\r\n        ];\r\n        this.setState({ commentText: \"\" });\r\n      } else {\r\n        obj.comments = [\r\n          ...obj.comments,\r\n          {\r\n            comment: this.state.commentText,\r\n            commentCount: obj.commentCount + 1,\r\n            commentId: obj.id,\r\n          },\r\n        ];\r\n        obj.commentCount = obj.commentCount + 1;\r\n        this.setState({ commentText: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //custom Styles are stored in classes\r\n    const { classes } = this.props;\r\n    const { currentImage, defaultLikes } = this.state;\r\n    return (\r\n      <div>\r\n        {this.state.isLoggedIn === false ? (\r\n          <Redirect to=\"/\" />\r\n        ) : (\r\n          <div>\r\n            <Header\r\n              profilePicture={this.state.profilePicture}\r\n              showSearchBox={false}\r\n              showProfileIcon={this.state.isLoggedIn ? true : false}\r\n              showMyAccount={false}\r\n            />\r\n            <div className=\"flex-container\">\r\n              <div className=\"profile-picture\">\r\n                <img\r\n                  className=\"profile-image\"\r\n                  src={this.state.profilePicture}\r\n                  alt={this.state.fullName}\r\n                />\r\n              </div>\r\n              <div className=\"profile-picture-summary\">\r\n                <Typography id=\"profile-username\" variant=\"h5\" component=\"h5\">\r\n                  {this.state.username}\r\n                </Typography>\r\n                <Typography>\r\n                  <span> Posts: {this.state.noOfPosts} </span>\r\n                  <span className=\"spacing\">\r\n                    {\" \"}\r\n                    Follows: {this.state.follows}{\" \"}\r\n                  </span>\r\n                  <span className=\"spacing\">\r\n                    {\" \"}\r\n                    Followed By: {this.state.followedBy}{\" \"}\r\n                  </span>\r\n                </Typography>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                  <div>\r\n                    <span className=\"profile-fullname\">\r\n                      {this.state.fullName}\r\n                    </span>\r\n                    <Fab\r\n                      color=\"secondary\"\r\n                      aria-label=\"edit\"\r\n                      className={classes.fab}\r\n                      onClick={this.fullNameEditOpenModalHandler}\r\n                    >\r\n                      <EditIcon />\r\n                    </Fab>\r\n                  </div>\r\n                </Typography>\r\n\r\n                {/* Edit Icon modal */}\r\n                <Modal\r\n                  className={classes.modal}\r\n                  open={this.state.modalIsOpen}\r\n                  onClose={this.fullNameEditCloseModalHandler}\r\n                  aria-labelledby=\"edit-icon\"\r\n                >\r\n                  <div className={classes.paper}>\r\n                    <h2 className=\"heading-h2\">Edit</h2>\r\n                    <TabContainer>\r\n                      <FormControl required>\r\n                        <InputLabel htmlFor=\"fullname\">Full Name</InputLabel>\r\n                        <Input\r\n                          id=\"fullname\"\r\n                          type=\"text\"\r\n                          fullname={this.state.fullName}\r\n                          onChange={this.editFullNameHandler}\r\n                        />\r\n                        <FormHelperText className={this.state.fullNameRequired}>\r\n                          <span className=\"red\">required</span>\r\n                        </FormHelperText>\r\n                      </FormControl>\r\n                      <br />\r\n                    </TabContainer>\r\n                    <br />\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={this.updateFullNameHandler}\r\n                    >\r\n                      UPDATE\r\n                    </Button>\r\n                  </div>\r\n                </Modal>\r\n              </div>\r\n              <div className=\"images-container\">\r\n                <GridList\r\n                  cellHeight={350}\r\n                  cols={3}\r\n                  className={classes.gridListMain}\r\n                >\r\n                  {this.state.imageData.map((image) => (\r\n                    <GridListTile\r\n                      onClick={() => this.imageClickHandler(image)}\r\n                      className=\"image-grid-item\"\r\n                      key={\"grid\" + image.id}\r\n                    >\r\n                      <img src={image.media_url} alt={image.id} />\r\n                    </GridListTile>\r\n                  ))}\r\n                </GridList>\r\n                <Modal\r\n                  className={classes.imageModal}\r\n                  open={this.state.imageModalIsOpen}\r\n                  onClose={this.imageCloseModalHandler}\r\n                  aria-labelledby=\"individual-image-modal\"\r\n                >\r\n                  <div className={classes.modalStyle}>\r\n                    <div className=\"image-modal-left\">\r\n                      <img\r\n                        className=\"clicked-image\"\r\n                        src={this.state.currentImage.media_url}\r\n                        alt={this.state.fullName}\r\n                      />\r\n                    </div>\r\n                    <div className=\"image-modal-right\">\r\n                      <div className=\"right-top\">\r\n                        <div className=\"right-top-image-username-container\">\r\n                          <img\r\n                            className=\"image-modal-profile-icon\"\r\n                            src={this.state.currentProfilePicture}\r\n                            alt={this.state.fullName}\r\n                          />\r\n                          <span className=\"image-modal-username\">\r\n                            {this.state.username}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"horizontal-line\" />\r\n                      </div>\r\n                      <div className=\"right-middleBottom-container\">\r\n                        <div className=\"right-middle\">\r\n                          <div>{this.state.currentImage.caption}</div>\r\n                          <div className=\"image-hashtags\">\r\n                            {this.state.currentImage.hastags}\r\n                          </div>\r\n                          <div className=\"comments-container\">\r\n                            {currentImage.commentCount === undefined // if comment count is undefined then do not display anything\r\n                              ? \"\"\r\n                              : currentImage.comments.map((\r\n                                  element //Iterating over comments array to show the comments to the corresponding image\r\n                                ) => (\r\n                                  <div\r\n                                    className=\"comment-display\"\r\n                                    key={element.commentCount}\r\n                                  >\r\n                                    <Typography\r\n                                      variant=\"subtitle2\"\r\n                                      className={classes.commentUsername}\r\n                                      gutterbottom=\"true\"\r\n                                    >\r\n                                      {currentImage.username}:\r\n                                    </Typography>\r\n                                    <Typography\r\n                                      variant=\"body1\"\r\n                                      id=\"comment-text-alt\"\r\n                                      className=\"comment-text\"\r\n                                      gutterbottom=\"true\"\r\n                                    >\r\n                                      {element.comment}\r\n                                    </Typography>\r\n                                  </div>\r\n                                ))}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          {/* Like button */}\r\n                          <IconButton\r\n                            id=\"like-button\"\r\n                            aria-label=\"like-button\"\r\n                            onClick={() =>\r\n                              this.likeBtnHandler(this.state.currentImage.id)\r\n                            }\r\n                          >\r\n                            {/* Border is red if user already liked the image else border is displayed */}\r\n                            {currentImage.userLiked === undefined ||\r\n                            currentImage.userLiked === false ? (\r\n                              <FavoriteBorderIcon\r\n                                className=\"like-icon\"\r\n                                fontSize=\"large\"\r\n                              />\r\n                            ) : (\r\n                              <FavoriteIcon\r\n                                className=\"liked-icon\"\r\n                                fontSize=\"large\"\r\n                              />\r\n                            )}\r\n                          </IconButton>\r\n                          {/* if count is 1, like is displayed else likes is displayed*/}\r\n                          {currentImage.count === undefined ? (\r\n                            defaultLikes === 1 ? (\r\n                              <span>{defaultLikes} like</span>\r\n                            ) : (\r\n                              <span>{defaultLikes} likes</span>\r\n                            )\r\n                          ) : currentImage.count === 1 ? (\r\n                            <span>{currentImage.count} like</span>\r\n                          ) : (\r\n                            <span>{currentImage.count} likes</span>\r\n                          )}\r\n                          {/* add comments section */}\r\n                          <FormControl\r\n                            className={classes.comment}\r\n                            fullWidth={true}\r\n                          >\r\n                            <InputLabel htmlFor=\"comment\">\r\n                              Add a comment\r\n                            </InputLabel>\r\n                            <Input\r\n                              id=\"comment\"\r\n                              className=\"comment-text\"\r\n                              type=\"text\"\r\n                              onChange={(event) =>\r\n                                this.onCommentTextChangeHandler(\r\n                                  event,\r\n                                  currentImage.id\r\n                                )\r\n                              }\r\n                              value={\r\n                                currentImage.id === this.state.currentCommentId\r\n                                  ? this.state.commentText\r\n                                  : \"\"\r\n                              }\r\n                            />\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              className={classes.addCommentBtn}\r\n                              onClick={() =>\r\n                                this.AddBtnHandler(currentImage.id)\r\n                              }\r\n                            >\r\n                              ADD\r\n                            </Button>\r\n                          </FormControl>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Modal>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Profile);\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from \"./home/Home\";\r\nimport Login from \"./login/Login\";\r\nimport Profile from \"./profile/Profile\";\r\n\r\n//Creating controller class for routing\r\nclass Controller extends Component {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = \"https://graph.instagram.com/\"; //setting the baseUrl of the api to pass down to components\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"main-container\">\r\n          {/* Route to login Page */}\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => <Login {...props} baseUrl={this.baseUrl} />}\r\n          />\r\n          {/* Route to home Page */}\r\n          <Route\r\n            exact\r\n            path=\"/home\"\r\n            render={(props) => <Home {...props} baseUrl={this.baseUrl} />}\r\n          />\r\n          {/* Route to profile Page */}\r\n          <Route\r\n            exact\r\n            path=\"/profile\"\r\n            render={(props) => <Profile {...props} baseUrl={this.baseUrl} />}\r\n          />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controller;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Controller from \"./screens/Controller\";\r\n\r\nReactDOM.render(<Controller />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}